# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Docker.gitlab-ci.yml

# Build a Docker image with CI/CD and push to the GitLab registry.
# Docker-in-Docker documentation: https://docs.gitlab.com/ee/ci/docker/using_docker_build.html
#
# This template uses one generic job with conditional builds
# for the default branch and all other (MR) branches.
include:
  - template: Security/Container-Scanning.gitlab-ci.yml
  - template: Security/SAST.gitlab-ci.yml


stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

docker-build:
  # Use the official docker image.
  image: docker:latest
  stage: build
  services:
    - name: docker:dind
      entrypoint: ["env", "-u", "DOCKER_HOST"]
      command: ["dockerd-entrypoint.sh"]
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    # See https://github.com/docker-library/docker/pull/166
    DOCKER_TLS_CERTDIR: ""
  tags:
    - docker
  # Default branch leaves tag empty (= latest tag)
  # All other branches are tagged with the escaped branch name (commit ref slug)
  before_script:
    - echo "$CI_REGISTRY"
    - echo "$CI_REGISTRY_IMAGE"
    - echo "$tag"
    - echo "$CI_REGISTRY_USER"
    - echo "$CI_REGISTRY_PASSWORD"
    - echo "$CI_COMMIT_BRANCH"
    - echo "$CI_DEFAULT_BRANCH"
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY

  script:
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        tag=""
        echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
      else
        tag=":$CI_COMMIT_REF_SLUG"
        echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
      fi
    - docker build --pull -t "$CI_REGISTRY_IMAGE${tag}" .
    - docker push "$CI_REGISTRY_IMAGE${tag}"
  # Run this job in a branch where a Dockerfile exists
  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - dockerfile

container_scanning:
  variables:
    SECURE_LOG_LEVEL: 'debug'
    CS_IMAGE: "$CI_REGISTRY_IMAGE:$tag"
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2

  before_script:
    - echo "$CI_DEFAULT_BRANCH"
    - echo "$CI_COMMIT_BRANCH"
    - echo "$CI_REGISTRY"
    - echo "$tag"
    - echo "$CI_REGISTRY_IMAGE:$tag"
    - echo "$CI_REGISTRY_IMAGE:${tag}"
    - echo "$CI_REGISTRY_IMAGE${tag}"
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        tag=""
        echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
      else
        tag=":$CI_COMMIT_REF_SLUG"
        echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
      fi
    
    - echo "$CI_REGISTRY"
    - echo "$tag"
    - echo "$CI_REGISTRY_IMAGE:$tag"
    - echo "$CI_REGISTRY_IMAGE:${tag}"
    - echo "$CI_REGISTRY_IMAGE${tag}"

  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - dockerfile
